/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package edu.pucv.mavenproject1;

import entidades.Inventario;
import entidades.ObraArte;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author dmena
 */
public class VentanaEliminar extends javax.swing.JFrame {
    
    private Inventario inventarioGeneral;

    /**
     * Creates new form VentanaEliminar
     */
    public VentanaEliminar(Inventario i) {
        
        inventarioGeneral = i;
        
        initComponents();
        configuracionInicial();
        
    }
    
    private void configuracionInicial() {
        this.setTitle("Eliminar Obra");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        panelObrasArtista.setVisible(false); // Ocultar al inicio
        cargarArtistasEnComboBox();
    }
    
    
    
    private void cargarArtistasEnComboBox() 
    {
        comboArtistas.removeAllItems();
        comboArtistas.addItem("Seleccione un artista...");

        if (inventarioGeneral.estaVacio()) {
            comboArtistas.addItem("No hay artistas con obras");
            comboArtistas.setEnabled(false);
            return;
        }

        // Usamos un Set para obtener artistas únicos sin repetir
        Set<String> nombresArtistas = new HashSet<>();
        for (ObraArte obra : inventarioGeneral.getObrasComoLista()) {
            nombresArtistas.add(obra.getArtista());
        }

        // Añadimos los artistas únicos al ComboBox
        for (String nombre : nombresArtistas) {
            comboArtistas.addItem(nombre);
        }
    }
    
    private void mostrarObrasDelArtista(String nombreArtista) 
    {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        boolean hayObras = false;

        for (ObraArte obra : inventarioGeneral.getObrasComoLista()) {
            if (obra.getArtista().equals(nombreArtista)) {
                listModel.addElement(obra.getId() + ": " + obra.getTitulo());
                hayObras = true;
            }
        }
        
        if (!hayObras) {
            listModel.addElement("Este artista no tiene obras registradas.");
        }
        
        listaObras.setModel(listModel);
        panelObrasArtista.setVisible(true); // Hacemos visible el panel con la lista
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboArtistas = new javax.swing.JComboBox<>();
        panelObrasArtista = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaObras = new javax.swing.JList<>();
        btnEliminar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Eliga el Artista :");

        comboArtistas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboArtistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboArtistasActionPerformed(evt);
            }
        });

        jLabel2.setText("Obras del Artista");

        listaObras.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaObras.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaObras);

        javax.swing.GroupLayout panelObrasArtistaLayout = new javax.swing.GroupLayout(panelObrasArtista);
        panelObrasArtista.setLayout(panelObrasArtistaLayout);
        panelObrasArtistaLayout.setHorizontalGroup(
            panelObrasArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelObrasArtistaLayout.createSequentialGroup()
                .addGroup(panelObrasArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelObrasArtistaLayout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabel2))
                    .addGroup(panelObrasArtistaLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        panelObrasArtistaLayout.setVerticalGroup(
            panelObrasArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelObrasArtistaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelObrasArtista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboArtistas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(panelObrasArtista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        String obraSeleccionadaTexto = listaObras.getSelectedValue();

        if (obraSeleccionadaTexto == null || !obraSeleccionadaTexto.contains(":")) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una obra válida de la lista.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int idObra = Integer.parseInt(obraSeleccionadaTexto.split(":")[0]);
        ObraArte obraAEliminar = inventarioGeneral.buscarObra(idObra);

        if (obraAEliminar == null) {
             JOptionPane.showMessageDialog(this, "La obra ya no existe.", "Error", JOptionPane.ERROR_MESSAGE);
             // Actualizar la vista por si acaso
             comboArtistasActionPerformed(null);
             return;
        }
        
        int respuesta = JOptionPane.showConfirmDialog(this,
                "¿Seguro que desea eliminar '" + obraAEliminar.getTitulo() + "'?",
                "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        
        if (respuesta == JOptionPane.YES_OPTION) {
            inventarioGeneral.eliminarObra(idObra);
            JOptionPane.showMessageDialog(this, "Obra eliminada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            
            comboArtistasActionPerformed(null);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void comboArtistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboArtistasActionPerformed
        if (comboArtistas.getSelectedIndex() > 0) {
            String artistaSeleccionado = (String) comboArtistas.getSelectedItem();
            mostrarObrasDelArtista(artistaSeleccionado);
        } 
        
        else {
            panelObrasArtista.setVisible(false);
        }
    }//GEN-LAST:event_comboArtistasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> comboArtistas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaObras;
    private javax.swing.JPanel panelObrasArtista;
    // End of variables declaration//GEN-END:variables
}
